<feature_model name="Model_Transformation">
<meta>
<data name="description">Model transformation taxonomy feature model</data>
<data name="creator">Krzysztof Czarnecki</data>
<data name="email">kczarnec at swen dot uwaterloo dot ca</data>
<data name="date">Oct 2003</data>
<data name="department">Generative Software Development Lab</data>
<data name="organization">University of Waterloo</data>
<data name="address">200 University Ave. West, Waterloo, ON, Canada</data>
<data name="phone">+1-519-888-4567</data>
<data name="website">http://gsd.uwaterloo.ca/</data>
<data name="reference">Krzysztof Czarnecki and Simon Helsen. Classification of model transformation approaches. In Online Proceedings of the 2nd OOPSLA03 Workshop on Generative Techniques in the Context of MDA, Anaheim, Oct 2003</data>
</meta> 
<feature_tree>
:r Model Transformation (f0)
	:m Transformation rules (f1)
		:m LHS/RHS (f2)
			:o Variables (f3)
				:g [1,1] (f4)
					: Untyped (f5)
					: Syntactically typed (f6) 
					: Semantically typed (f7)
			:g [1,*] (f8)
				: Patterns (f9)
					:m Form (f10)
						:g [1,1] (f11)
							: Strings (f12)
							: Terms (f13)
							: Graphs (f14)
					:m Syntax (f15)
						:g [1,*] (f16)
							: Abstract (f17)
							: Concrete (f18)
								:g [1,*] (f19)
									: Textual (f20)
									: Graphical (f21)
					:m Typing (f22)
						:g [1,1] (f23)
							: Untyped (typ_untyped)
							: Syntactically typed (typ_syntactically_typed)
							: Semantically typed (typ_semantically_typed)
				: Logic (f24)
					:g [1,*] (f25)
						: Non-executable (f26)
						: Executable (f27)
							:g [1,*] (f28)
								: Imperative (f29)
								: Declarative (f30)
		:o LHS/RHS Syntactic Separation (f31)
		:o Bidirectionality (f32)
		:o Parameterization (f33)
		:o Intermediate structures (f34)
	:o Rule application scoping (f35)
		:g [1,*] (f36)
			: Source (scoping_source)
			: Target (target_source)
	:m Source-Target relationship (f37)
		:g [1,*] (f38)
			: New target (f39)
			: Existing target (f40)
				:o In-place (f41)
				:m Update (f42)
					:g [1,1] (f43)
						: Destructive (f44)
						: Extension only (f45)
	:m Rule application strategy (f46)
		:g [1,*] (f47)
			: Deterministic (f48)
			: Non-deterministic (f49)
				:g [1,*] (f50)
					: Concurrent (f51)
					: One-point (f52)
			: Interactive (f53)
	:m Rule scheduling (f54)
		:m Form (f55)
			:g [1,*] (f56)
				: Implicit (f57)
				: Explicit (f58)
					:g [1,1] (f59)
						: Internal (f60)
						: External (f61)
		:m Rule selection (f62)
			:g [1,*] (f63)
				: Explicit condition (f64)
				: Non-determinism (f65)
				: Conflict resolution (f66)
				: Interactive (f67)
		:o Rule Iteration (f68)
			:g [1,1] (f69)
				: Recursion (f70)
				: Looping (f71)
				: Fixpoint Iteration (f72)
		:o Phasing (f73)
	:m Rule organization (f74)
		:o Modulatiry mechanisms (f75)
		:o Reuse mechanisms (f76)
			:g [1,*] (f77)
				: Inheritance (f78)
				: Logical composition (f79)
		:m Organizational Structure (f80)
			:g [1,1] (f81)
				: Source-oriented (f82)
				: Target-oriented (f83)
				: Independent (f84)
	:m Tracing (f85)
		:o Dedicated support (f86)
			:m Storage location (f87)
				:g [1,1] (f88)
					: Model (f89)
						:g [1,*] (f90)
							: Source (model_source)
							: Target (model_target)
					: Separate (f91)
			:m Control (f92)
				:g [1,1] (f93)
					: Manual (f94)
					: Automatic (f95)
						:g [1,1] (f96)
							: All rules (f97)
							: Selected rules (f98)
	:m Directionality (f99)
		:g [1,*] (f100)
			: Unidirectional (f101)
			: Bidirectional (f102)
				:g [1,1] (f103)
					: Bidirectional rules (f104)
					: Complementary pairs (f105)
</feature_tree>
<constraints>
</constraints>
</feature_model>
